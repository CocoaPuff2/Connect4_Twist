@startuml
class GameManager {
    - Game game
    - Gui gui
    - Player player1
    - Player player2
    - short timerLength
    Tick()
}

class Game {
    - GameType gameType
    - Board board
    + Board getBoard()
    + bool winCondition
}

GameManager::game *--> Game
Game::Board *--> Board
Game::getBoard *--> Board
GameManager::player1 *--> Player
GameManager::player2 *--> Player
Game::GameType *--> GameType
Board::slots o--> Color
Player::color o--> Color
'AbstractPlayer
Board::addPiece ..> Player
Player::sets o--> AdjacentColorSet
AdjacentColorSet o--> Coord

class Coord extends Pair<byte,byte>{
    + byte getCol()
    + byte getRow()
    + void add(Coord)
    + void subtract(Coord)
}

class AdjacentColorSet extends SortedSet<Coord>{
    +AdjacentColorSet(byte size)
    -byte size
    +byte getSize()
}

'class Player {
'    - Color color
'    - SortedSet<LinearCoordSet> sets
'}
abstract class Player {
    - Color color
    - SortedSet<AdjacentColorSet> sets
    + SortedSet<AdjacentColorSet> getSets()
    + {abstract} byte getMove()
}

class NetworkPlayer extends Player{
    + NetworkPlayer(Socket s)
    + byte getMove()
}
class LocalPlayer extends Player{
    + LocalPlayer(Gui g)
    + byte getMove()
}
class AiPlayer extends Player{
    + AiPlayer(Board b)
    + byte getMove()
}

'LocalPlayer ..|> Player
'NetworkPlayer ..|> Player
'AiPlayer ..|> Player


class Board {
    + Board(byte cols, byte rows)
    + byte getRows()
    + byte getCols()
    + bool addPiece(Player p, byte column)
    + Color[][] getSlots()
    - byte rows
    - byte columns
    - Color[][] slots
    - Vector<AdjacentColorSet> findAdjacent(Coord)
}
'Notes: Previously had 'reset'. Seems unnecessary. Just create a new board when we
'start a new game. Could in theory have different properties.

note left of Board::Board
    Initialize the array with the [cols][rows] dimensions
    All should be initialized as NONE.
    set instance variables
end note

note left of Board::slots
    Two dimensional array of the places for pieces on the board
    Upper-leftmost is 0,0, a la images, spreadsheets, most
    computer things.
end note

note left of Board::addPiece
    (pseudocode) find the first empty row along the specified column
    for (currRow = rows - 1; currRow >= 0; curRow --) {
        if (slots[column][currRow] == NONE) {
            slots[column][currRow] = p.color
            return true
        }
    }
    return false (there were no empty slots, though we should never
        get here bc the gui should prevent clicking if all slots on
        the column are full)
end note


note left of Board::findAdjacent
    check outward in each direction(NW,NE,E,SE,S,SW,S)
    for pieces of same color. Must account for falling
    midway through a set of 4. Possibly a case for recursion.
end note

enum Color {
    NONE
    RED
    BLACK
}

'this may be better as some other structure within Board.
'The idea is to add/subtract these from a given coord to explore
'points on either opposing side
enum LineDirection {
    SE (1,1)
    S (0,1)
    SW (-1,1)
    E (1,0)
}

enum GameType {
    FIRST_TO_SET
    SET_TOTAL
}
@enduml